Constraint Programming: Intution to CP
    - Computational paradigm
        - Use constraints to reduce the set of values that each
          variable can take
        - remove values that cannot appear in any solution
       
    - Modeling methodology
        - convey the sturcture of problem as explicitly as
          possible
        - express as sub structures
        - give solvers as much info. as possible

    - 8 Queens problems
        - place 8 queens on a chess board so that none of them
          attach each other
        - two queens attack each other if they are on same column, row or diagonal 
        - In CP, we remove items from search space depending on current solution. For example, in N queens, all the  rows,
          columns and diagonals for each queen are removed
        - Put queen greedily on cloumns row, having only once place left, as we know each column or row will have
          one queen atleast
            
    - Computational paradigm ( revisited )
        - Choice
            - make a choice when no more deduction can be done
            - Assume a choice assigns a value to a variable
            - Choices are often wrong, the solver backtracks and tries another value
        - Specification:
            - Coloring a Map: Two adjacent territories receive the same color
            - Theorem proved with a computer: Every map can be colored with 4 colors
            - choose the decision variables
                - The color given to each country
                - Domain is set of values that a variable can take, i.e. 4 diff. colors
            - Express constraints in terms of decision variable
                - specify that two adjacent countries cannot be given same color
            - High level language model example on Slide 9: Coloring a Map
            - Slide 12: Example on a Map with countries
        - Branch and Prune:
            - Pruning: Reduce the search space as much as possible by using constraints
            - Branching : decompose the problems into subproblems

        - Complete method, not a heuristic:
            - Given enough time, it will find a solution to a satisfaction problem ( N-queens)
            - Given enough time, it will find an optimal solution to an optimzation problem

        - Focus on feasibility:
            - How to use constraints to prune the search space
                                        
        - What does constraint do?
            - Feasibility checking: Node we are exploring is potentially feasible, if a constraint can be satisfied given the domain of variables
            - Helps to prune the search space

        - Propagation engine:
            - This is the core of CP
            - It is an iterative fix-point algorithm ( Read? )
            - Select  a constraint C
            - Algorithm: ( Slide 29)
                - If C is feasible use it prune the space, if not then return faliure
                - Keep iterating over constraints until no constraint can remove any value from the domain of its variables ( Fix point state )
                - After fix point state, the system is asked to make a choice 
        - What are decision variables?
            - many possible modellings
            - Example N-queens
                - associate a decision variable with each column
                - the variable denotes the row of the column on which queen is to be placed

% From this step we just take the important point as doubts a notes, as the slide as quite good %
                - Not clear for upward diagonal? Ok got it, from exp. on Slide 32. Important
                - Isn't this formulation a bit optimistic as we are just interested in one row up or below for the diagonal?

        - Simple example for feasibility checking, X neq Y 
            -( Slide 35 not clear): Now it is. He says that if union is > 1, then we can pick two diff. values in set X and Y, and hence
               satisfy the constraints. 
            - Pruning Occurs only if one of the variable can pick only one value. IMP. Slide 36


Constraint Programming 2 : propogation, arithmetic constraints, send+more = money
    - Each constraint system has a dedicated solver
    - Send More money example ( interesting example )
        - Interesting slide 11, for indereing value[s] 
        - Why dint he perform intersection in the range on slide 14? 
    - Linear constraints over integers
        - Interesting example for feasibility test ( Slide 18 )
        - Interesting way to Prune ( Slide 19 )
        - Important: Ceil for X and Floor for Y ( Slide 19 )
        - He did not complete but I guess, using new bounds for Xi and Yi 
          we will update the l and r and continue? ( Check ) 
    - Summary:
        - Every problem has their own dedicated constraints
        - We used constraint propogation for Sed More money
            - Propogates the information of variables in diff. constraints for feasibility check
              and pruning.
        - We used bound propogation for Linear constraints
            
            - We compute the upper and lower bound for the variables


Constraint Programming 3 : Rectification, element constraint, magic series, stable marriage
    - Illustrating rich modelling language of CP
        - ability to state complex, idiosyncratic constraints
    - Magic series ( fun problem )
            - Reification
                - transform the constraint into 0/1 variable depending if the constraint
                  associated with it is true or false.
                - Variables are converted in boolean ( Check again )
            - Constraints are made of smaller constraints
    - Stable Marriages
        - in ranking, lower number for wrank/mrank means higher preference
        - Nice slide 12 for indexing array 
        - Typo in slide 14
    - Basic Element Constraint
        - Interesting example for pruning (Slide 17)
        - Propogation of constraints from one variable to another

Constraint Programming 4: Global constraints
    - Alldifferent (Global constraints)  
        - Writes queens problem in a new form ( We might have to revisit Queens formulation again )
        - Feasibility test-
            - Example with three variables, showing importance of global constraints to discover infeasibilities earlier
            - Nice slide 23,24 and 25
        - Pruning-
            - Example slide 27
            - Again global constraints help to prune search space sooner
    - Sometimes, we can have optimal pruning, and some time it would be sub-optimal
    - Sudoku:
        - 3 constraints using all-different 
        - Nice deduction of 2 at slide 31. ( Yeah, it is magic )

    - Table Constraints
        - Important slide 32, for pruning using table constraint

    - Graph coloring for countries
        - Why does he take the min of maximum ? Can't we take the min directly over the number of colors? ( Max is valid as colors are indicated by numbers )
        - In CP, we try to reduce the optimization problem to a feasibility problem
        - Find a solution which satisfies the constraints ( 4 colors )
        - Impose a constraint that the next solution must be better ( Number of colors should be less than 4 )
Constraint Programming 5 - Symmetry breaking, BIBD, scene allocation
    - Symmetries
        - Importatn slide for introduction ( Slide 3)
    - BIBD
        - Value symmetry 
        - Example of combinatorial design: These always have lot of symmetry
        - Symmetry is present in row and columns ( Slide 6 and 7)
        - We want to avoid exploring all these set of configurations    
    - Breaking variable symmetries
        - Impose an ordering: In the previous case, lexicographic constraint ( Start comparing from left, MSB)
        - Important slide 9, to break row and column symmetry

    - Scene allocation
        - Value symmetry
        - How to break symmetry for the days? ( Important slide 15 )
        - Limitation of this method to break symmetry will be discussed later in the class

Constraint Programming 6- redundant constraints, magic series, market split
    - Redundant constraints
        - They express properties of the solutions not captured by model
        - These constraints are always valid for any solution, but help the solver to prune faster
        - Magic Series:
            - Nice constraint: The sum of occurences has to be equal to length of series
            - Second constraint is stronger, helps to upper bound the search space ( Look slide 10,11 )
            - Important: Follow the slide 12-13, for the example. Quite useful  
       - Market Split problem:
            - Like knapsack, but constraints instead of less than equal we have equal
            - Surrogate constraint. What is alpha? ( Doubt )
Constraint Programming 7 - Car sequencing, dual modelling
    - We will talk about redundant constraints
    - Car sequencing ( Implied constraints )
        -Interesting real life problem ( see slide 4 details )
        - Slide 9 is imp. but still a bit confusing
        - Slide 10 is more intutive 
    - Important slide 18-19 for summary of diff. constraints        
    - Dual Modeling
        - many possible modellings
        - Interesting application to queens problem
                    
            
     
